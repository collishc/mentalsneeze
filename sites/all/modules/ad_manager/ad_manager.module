<?php

/**
 * Implements hook_block_info().
 */
function ad_manager_block_info() {
  $blocks = array();
  ctools_include('export');
  $ads = ctools_export_load_object('ad_manager_ad');
  foreach ((array) $ads as $ad) {
    if (is_object($ad) && $ad->name) {
      $blocks[$ad->name]['info'] = t('Ad: !name', array('!name' => $ad->name));
    }
  }
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function ad_manager_block_view($delta = '') {
  return array(
    'content' => theme('ad_manager_ad', array('name' => $delta)),
  );
}

/**
 * CTools export plugin callback; on create set defaults.
 */
function ad_manager_ctools_ad_create($set_defaults) {
  // Load schema defaults.
  $item = ctools_export_new_object('ad_manager_ad', $set_defaults);

  // Set default ad provider selection.
  if ($set_defaults) {
    $providers = ad_manager_providers();
    $item->provider = key($providers);
  }

  return $item;
}

/**
 * CTools export plugin callback; on load prepare item.
 */
function ad_manager_ctools_ad_load($name) {
  ctools_include('export');

  // Load export's settings.
  $result = ctools_export_load_object('ad_manager_ad', 'names', array($name));
  if (isset($result[$name])) {
    // If settings haven't been unserialized yet.
    if (!is_array($result[$name]->settings)) {
      $result[$name]->settings = unserialize($result[$name]->settings);
    }
    return $result[$name];
  }
}

/**
 * Implements hook_ctools_block_info().
 */
function ad_manager_ctools_block_info($module, $delta, &$info) {
  $info['category'] = variable_get('ad_manager__block_category', 'Advertising');
}

/**
 * Implements hook_ctools_plugin_api().
 */
function ad_manager_ctools_plugin_api($owner, $api) {
  if ($owner == 'ad_manager' && $api == 'ad_manager_ad_default') {
    return array('version' => 1);
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function ad_manager_ctools_plugin_directory($module, $type) {
  // Load the export_ui plugin.
  if ($type =='export_ui') {
    return 'plugins/export_ui';
  }
}

/**
 * Implements hook_menu().
 *
 * Add a global settings form for ad providers.
 */
function ad_manager_menu() {
  return array(
    'admin/structure/ad-manager/settings' => array(
      'title' => t('Settings'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('ad_manager_settings_form'),
      'access arguments' => array('administer ad manager'),
      'type' => MENU_LOCAL_TASK,
    ),
  );
}

/**
 * Implements hook_permission().
 */
function ad_manager_permission() {
  return array(
    'administer ad manager' => array(
      'title' => t('Administer ad manager'),
      'description' => t('Configure, create and delete ad positions.'),
    ),
  );
}

/**
 * Discover ad providers.
 *
 * @return array
 */
function ad_manager_providers() {
  $cache = cache_get('ad_manager:providers');
  if ($cache) {
    return $cache->data;
  }

  $providers = array();
  $version = 1;

  $modules = module_implements('ad_manager_providers');
  foreach ($modules as $module) {
    $provider = call_user_func($module . '_ad_manager_providers');

    // Validate any providers supplied by the implementing module are valid and
    // compatible.
    if (is_array($provider) && isset($provider['version']) &&
        $provider['version'] == $version && is_array($provider['provides'])) {
      foreach ($provider['provides'] as $callback => $name) {
        $providers[$callback] = array('module' => $module, 'name' => $name);
      }
    }
  }

  // Store providers in cache and return.
  cache_set('ad_manager:providers', $providers);
  return $providers;
}

/**
 * Settings form to be altered by ad providers.
 */
function ad_manager_settings_form() {
  return array(
    '#tree' => TRUE,
    'submit' => array(
      '#type' => 'submit',
      '#value' => t('Submit'),
      '#weight' => 100,
    ),
  );
}

/**
 * Implements hook_theme().
 */
function ad_manager_theme($existing, $type, $theme, $path) {
  return array(
    'ad_manager_ad' => array(
      'variables' => array('name' => NULL),
    ),
  );
}

/**
 * Theme ads.
 */
function theme_ad_manager_ad($vars) {
  $name = $vars['name'];
  // Support multiple instances of a block on a page with incrementing index.
  static $index = array();

  if (strlen($name) > 0) {
    //Load the ad based on name.
    $ad = ad_manager_ctools_ad_load($name);

    // Prepare variables for use as HTML element attributes.
    $provider = str_replace('_', '-', $ad->provider);
    $name = str_replace('_', '-', $name);
    $index[$name] = isset($index[$name]) ? $index[$name] + 1 : 0;

    return '<div id="ad-manager-ad-' . $name . '-' . $index[$name] . '" class="ad-manager-ad ' . $provider . '">'
      . theme($ad->provider, array('name' => $name, 'settings' => $ad->settings, 'index' => $index[$name]))
      . '</div>';
  }
}
